---
import Main from "../layout/Main.astro";
---

<Main >

		<dialog id="my_modal_1" class="modal modal-bottom sm:modal-middle">
			<div class="modal-box">
				<div>
					<img src="/assets/logo.png" width="">
				</div>

				<h3 class="text-lg font-bold">Bienvenue sur Stras1920!</h3>
				<p class="text-justify">Cette carte interactive est le fruit d'un mémoire en histoire (informatique appliquée à l'histoire) explorant l'utilisation des nouvelles technologies afin de cartographie l'histoire. Pour en savoir plus sur la recherche, rendez-vous dans l'onglet Pour en savoir plus à gauche. </p>
				<p class="text-sm pt-5 text-right ">Réalisé par <a class="link link-info" href="https://github.com/joshuavachon25/stras1920" target="_blank">Joshua Vachon</a></p>
				<div class="modal-action">
					<form method="dialog">
						<button class="btn btn-active btn-success">Consulter la carte</button>
					</form>
				</div>
			</div>
		</dialog>

	<div class="h-screen w-screen overflow-hidden">


	<div class="absolute top-4 left-4 w-80">
		<div class="collapse collapse-plus bg-base-100 border border-base-300">
			<input type="radio" name="my-accordion-3" checked/>
			<div class="collapse-title font-semibold">Options</div>
			<div class="collapse-content text-sm flex flex-col">
				<fieldset class="fieldset bg-base-200 border-base-300 rounded-box border p-4">
					<legend class="fieldset-legend">Mode</legend>
					<div class="join mx-auto">
						<input class="join-item btn btn-xs" type="radio" name="options" aria-label="Consultation" checked/>
						<input class="join-item btn btn-xs" type="radio" name="options" aria-label="Cluster" />
						<!--<input class="join-item btn btn-xs" type="radio" name="options" aria-label="Analyse" />-->
						<input class="join-item btn btn-xs" type="radio" name="options" aria-label="Heatmap" />
					</div>
				</fieldset>
				<fieldset class="fieldset bg-base-200 border-base-300 rounded-box border p-4">
					<legend class="fieldset-legend">Couches</legend>
					<label><input type="checkbox" id="check_1" class="toggle toggle-xs checked:bg-[#e1546e] checked:text-[#e1546e]"> Articles de brasserie</label>
					<label><input type="checkbox" id="check_2" class="toggle toggle-xs checked:bg-[#cc68a5] checked:text-[#cc68a5]"> Grossistes de vins</label>
					<label><input type="checkbox" id="check_3" class="toggle toggle-xs checked:bg-[#a970b6] checked:text-[#a970b6]"> Débits de vins</label>
					<label><input type="checkbox" id="check_4" class="toggle toggle-xs checked:bg-[#6f84ee] checked:text-[#6f84ee]"> Brasseurs</label>
					<label><input type="checkbox" id="check_5" class="toggle toggle-xs checked:bg-[#6f52e0] checked:text-[#6f52e0]"> Entrepôts/Négociants de bières</label>
					<label><input type="checkbox" id="check_6" class="toggle toggle-xs checked:bg-[#8c56d0] checked:text-[#8c56d0]"> Cidreries</label>
					<label><input type="checkbox" id="check_7" class="toggle toggle-xs checked:bg-[#52a9e0] checked:text-[#52a9e0]"> Distilleries</label>
					<label><input type="checkbox" id="check_8" class="toggle toggle-xs checked:bg-[#42b0aa] checked:text-[#42b0aa]"> Marchands d'houblons</label>
					<label><input type="checkbox" id="check_9" class="toggle toggle-xs checked:bg-[#aed163] checked:text-[#aed163]"> Malteries</label>
					<label><input type="checkbox" id="check_10"  class="toggle toggle-xs checked:bg-[#ea6953] checked:text-[#ea6953]"> Tonnelier</label>
					<label><input type="checkbox" id="check_11" disabled class="toggle disabled toggle-xs checked:bg-[#e78361] checked:text-[#e78361]"> Café-Brasserie (bientôt)</label>
					<label><input type="checkbox" id="check_12" disabled class="toggle disabled toggle-xs checked:bg-[#eca050] checked:text-[#eca050]"> Café-Bars (bientôt)</label>
				</fieldset>
			</div>
		</div>
		<div class="collapse collapse-plus bg-base-100 border border-base-300">
			<input type="radio" name="my-accordion-3"/>
			<div class="collapse-title font-semibold">Données géospatiales</div>
			<div class="collapse-content text-sm">
				<p>Données vectorisées avec QGIS en se basant sur les sources suivantes:</p>
				<ul class="list">
					<li class="list-row">
						<span class="text-xs">[8_FI_90] Plan de la ville de Strasbourg par Auguste Gruninger (1920) via les <a href="https://archives.strasbourg.eu/">archives de Strasbourg</a></span>
					</li>
					<li  class="list-row">
						<span class="text-xs">GE D-9326 - Istra. Plan de Strasbourg (1920) via <a class="link" href="https://gallica.bnf.fr/ark:/12148/btv1b530196986">Gallica</a></span>
					</li>
					<li  class="list-row">
						<span class="text-xs">1 BA 1920 - Annuaire d'adresses de la ville de Strasbourg (1920) via <a class="link" href="https://archives.strasbourg.eu/ark:/39332/vtaed3c7a9ae804cffe/daogrp/0/layout:table/idsearch:RECH_45a649bb62825c10babda3bebdd1165b">archives de Strasbourg</a></span>
					</li>
				</ul>
				<p>Création d'une table de correspondance des noms dans le temps en sa basant sur l'ouvrage suivant:</p>
				<ul class="list">
					<li class="list-row">
						<span class="text-xs">Dictionnaire historique des rues de Strasbourg (2012) sous la direction de Maurice Moszberger</span>
					</li>
				</ul>


			</div>
		</div>
		<div class="collapse collapse-plus bg-base-100 border border-base-300">
			<input type="radio" name="my-accordion-3"/>
			<div class="collapse-title font-semibold">Pour en savoir plus...</div>
			<div class="collapse-content text-sm">
				<img src="/assets/logo.png">
				<div class="flex flex-col gap-2">
					<button class="btn btn-outline btn-info" disabled>Consulter le mémoire</button>
					<a href='https://github.com/joshuavachon25' target="_blank" class="btn btn-outline btn-info">Github de l'auteur</a>
					<a href='https://pypi.org/project/geocr/' target="_blank" class="btn btn-outline btn-info">Librairie GeOCR</a>
				</div>
			</div>
		</div>
	</div>
	<div class="absolute bottom-4 right-4 p-10  bg-base-100 border border-base-300" id="infoPanel">
		<div id="consult_option">
			<div class="font-semibold" id="description_popup_name">Explorateur de données</div>
			<div class="text-sm max-h-80 pr-10 overflow-auto" id="description_popup_desc">En mode consultation, sélectionnez une couche de données, puis cliquez sur une entité sur la carte</div>
		</div>
		<div id="heatmap_option" class="hidden">
			<div class="font-semibold">Taille du rayon (Heatmap)</div>
			<label class="flex flex-row gap-5 items-center"><input type="range" id="htrange" min="0" max="200" value="30" class="range range-xs" /><span id="htrange_value">30</span></label>
		</div>


	</div>
	<div class="absolute top-4 right-4 w-40 collapse bg-base-100 border-base-300 border">
		<input type="checkbox" checked/>
		<div class="collapse-title font-semibold">Légende</div>
		<div class="collapse-content text-sm">
			<div class="flex flex-col">
				<div class="flex">
					<div class="w-4 h-4 bg-[#e8ce59] mx-2"></div>
					<p class="flex-grow">Batiment</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#aeaeae] mx-2"></div>
					<p class="flex-grow">Fortifications</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#b0d194] mx-2"></div>
					<p class="flex-grow">Espaces verts</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#7ad9eb] mx-2"></div>
					<p class="flex-grow">Cours d'eau</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#999999] mx-2"></div>
					<p class="flex-grow">Monuments</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#333837] mx-2"></div>
					<p class="flex-grow">Gare</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#d494a3] mx-2"></div>
					<p class="flex-grow">Hopital</p>
				</div>
				<div class="flex">
					<div class="w-4 h-4 bg-[#eaeaea] mx-2"></div>
					<p class="flex-grow">Zones urbaines</p>
				</div>
			</div>

		</div>
	</div>
	<div id="map" class="h-full w-auto"></div>
	</div>
</Main>

<script>
    import maplibregl from 'maplibre-gl'
	let previousSelection = []
	let layerSelection = []
	let previousMode = undefined
	let mode = 'Consultation'
	const modeLayers = {
		'Consultation': [],
		'Cluster': [],
		'Analyse': [],
		'Heatmap': [],
	}
	const catName = ['','Magasin d\'articles de brasserie', 'Grossiste de vins et spiritueux', 'Débit de vins', 'Brasseur', 'Entrepot ou négociant de bière', 'Cidrerie', 'Distillerie', 'Marchand d\'Houblons', 'Malterie', 'Tonnelier', 'Café-Brasserie', 'Café-Bars']
	const popdescd = document.getElementById('description_popup_desc')
	const colors = ["", '#e1546e', '#cc68a5', '#a970b6', '#6f84ee', '#6f52e0', '#8c56d0','#52a9e0','#42b0aa','#aed163','#ea6953','#e78361','#eca050','#','#'];


	const map = new maplibregl.Map({
		container: 'map',
		style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',
		center: [7.756836,48.585316],
		zoom: 14,
		attributionControl: false
	});

	function manageLayers() {
		mode == 'Consultation' ? document.getElementById("consult_option").classList.remove("hidden") : document.getElementById("consult_option").classList.add("hidden")
		mode == 'Heatmap' ? document.getElementById("heatmap_option").classList.remove("hidden") : document.getElementById("heatmap_option").classList.add("hidden")
		if (previousMode === 'Heatmap') {
			map.setLayoutProperty('heatmap_global', 'visibility', 'none');
		}
		if (previousMode && mode !== previousMode) {
			layerSelection.forEach((selection) => {
				const prevLayer = modeLayers[previousMode][selection];
				const prevUnclustered = modeLayers[previousMode][selection + 20];
				const prevUnlabeled = modeLayers[previousMode][selection + 40];
				const newLayer = modeLayers[mode][selection];
				const newUnclustered = modeLayers[mode][selection + 20];
				const newUnlabeled = modeLayers[mode][selection + 40];

				if (map.getLayer(prevLayer?.id)) map.removeLayer(prevLayer.id);
				if (previousMode === 'Cluster' && map.getLayer(prevUnclustered?.id)) map.removeLayer(prevUnclustered.id);
				if (previousMode === 'Cluster' && map.getLayer(prevUnlabeled?.id)) map.removeLayer(prevUnlabeled.id);

				if (newLayer && !map.getLayer(newLayer.id)) map.addLayer(newLayer);
				if (mode === 'Cluster' && newUnclustered && !map.getLayer(newUnclustered.id)) map.addLayer(newUnclustered);
				if (mode === 'Cluster' && newUnlabeled && !map.getLayer(newUnlabeled.id)) map.addLayer(newUnlabeled);
			});
		} else {
			const added = layerSelection.filter(x => !previousSelection.includes(x));
			const removed = previousSelection.filter(x => !layerSelection.includes(x));

			added.forEach((layer) => {
				const main = modeLayers[mode][layer];
				const unclustered = mode === 'Cluster' ? modeLayers[mode][layer + 20] : null;
				const labels = mode === 'Cluster' ? modeLayers[mode][layer + 40] : null;

				if (main && !map.getLayer(main.id)) map.addLayer(main);
				if (unclustered && !map.getLayer(unclustered.id)) map.addLayer(unclustered);
				if (labels && !map.getLayer(labels.id)) map.addLayer(labels);
			});

			removed.forEach((layer) => {
				const main = modeLayers[mode][layer];
				const unclustered = mode === 'Cluster' ? modeLayers[mode][layer + 20] : null;
				const labels = mode === 'Cluster' ? modeLayers[mode][layer + 40] : null;

				if (main && map.getLayer(main.id)) map.removeLayer(main.id);
				if (unclustered && map.getLayer(unclustered.id)) map.removeLayer(unclustered.id);
				if (labels && map.getLayer(labels.id)) map.removeLayer(labels.id);
			});
		}

		if (mode === 'Heatmap') {
			const categories = layerSelection.map(Number);
			map.setFilter('heatmap_global', ['in', 'Categorie', ...categories]);
			map.setLayoutProperty('heatmap_global', 'visibility', 'visible');
		}


		previousMode = mode;
		previousSelection = [...layerSelection];
	}

	document.getElementById("htrange").addEventListener("input", (event) => {
		console.log(event)
		map.setPaintProperty('heatmap_global', 'heatmap-radius', event.target.valueAsNumber)
		document.getElementById("htrange_value").innerText = event.target.valueAsNumber
	})

	map.on('load', () => {
		// // Chargement des sprites
		// for (let i = 1; i <= 12; i++) {
		// 	const url = `/assets/sprites/${i}.png`;
		// 	fetch(url)
		// 		.then((res) => res.blob())
		// 		.then((blob) => createImageBitmap(blob))
		// 		.then((imageBitmap) => {
		// 			if (!map.hasImage(`icon-${i}`)) {
		// 				map.addImage(`icon-${i}`, imageBitmap, { pixelRatio: 2 });
		// 			}
		// 		})
		// 		.catch((err) => console.error(`Failed to load icon-${i}`, err));
		// }

		// Masque les couches par défaut du fond
		const layers = map.getStyle().layers;
		layers.forEach((layer) => {
			if (
				layer.type === 'symbol' ||
				layer.type === 'line' ||
				(layer['source-layer'] && layer['source-layer'].includes('building'))
			) {
				map.setLayoutProperty(layer.id, 'visibility', 'none');
			}
		});

		// Sources fixes
		map.addSource('sol', {
			type: 'geojson',
			data: '/data/1920_sol.geojson'
		});
		map.addSource('rues', {
			type: 'geojson',
			data: '/data/Rues1920.geojson'
		});
		map.addSource('labels', {
			type: 'geojson',
			data: '/data/label.geojson'
		});

		map.addLayer({
			id: 'sol',
			type: 'fill',
			source: 'sol',
			paint: {
				'fill-color': [
					'match',
					['get', 'type'],
					'Batiment', '#e8ce59',
					'Vert', '#b0d194',
					'Fortification', '#aeaeae',
					'Eau', '#7ad9eb',
					'Monument', '#999999',
					'Train', '#333837',
					'Hopital', '#d494a3',
					'#eaeaea'
				],
				'fill-opacity': 0.99
			}
		});
		map.addLayer({
			id: 'rues',
			type: 'symbol',
			source: 'rues',
			minzoom: 13.9,
			layout: {
				'text-field': ['to-string', ['get', 'NOM1']],
				'symbol-placement': 'line-center',
				'text-size': 12
			}
		});

		map.addLayer({
			id: 'labels',
			type: 'symbol',
			source: 'labels',
			minzoom: 1,
			layout: {
				'text-field': ['to-string', ['get', 'Name']],
				'text-size': 16
			}
		});

		// Chargement et traitement de Boire1920
		fetch('/data/Boire1920.geojson')
			.then(res => res.json())
			.then((geojson) => {
				map.addSource('boire', {
					type: 'geojson',
					data: geojson
				});

				map.addLayer({
					id: 'heatmap_global',
					type: 'heatmap',
					source: 'boire',
					maxzoom: 18,
					layout: {
						visibility: 'none'
					},
					filter: ['in', 'Categorie', -1], // mis à jour dynamiquement
					paint: {
						'heatmap-intensity': [
							'interpolate', ['linear'], ['zoom'],
							0, 1,
							18, 3
						],
						'heatmap-color': [
							'interpolate',
							['linear'],
							['heatmap-density'],
							0, 'rgba(33,102,172,0)',
							0.2, 'rgb(103,169,207)',
							0.4, 'rgb(209,229,240)',
							0.6, 'rgb(253,219,199)',
							0.8, 'rgb(239,138,98)',
							1, 'rgb(178,24,43)'
						],
						'heatmap-radius': 60,
						'heatmap-opacity': 0.8
					}
				});


				for (let i = 1; i <= 12; i++) {
					const catFeatures = geojson.features.filter(f => f.properties.Categorie === i);

					// Ajout source cluster par catégorie
					map.addSource(`boire_cluster_${i}`, {
						type: 'geojson',
						data: {
							type: 'FeatureCollection',
							features: catFeatures
						},
						cluster: true,
						clusterRadius: 30,
						clusterMaxZoom: 21
					});

					// Consultation
					modeLayers['Consultation'][i] = {
						id: `c${i}`,
						type: 'circle',
						source: 'boire',
						filter: ['==', ['get', 'Categorie'], i],
						paint: {
							'circle-color': colors[i],
							'circle-radius': 5,
							'circle-stroke-width': 2,
							'circle-stroke-color': "#000"
						},
						minzoom: 0,
						maxzoom: 24
					};

					// Cluster
					modeLayers['Cluster'][i] = {
						id: `cl${i}`,
						type: 'circle',
						source: `boire_cluster_${i}`,
						filter: ['has', 'point_count'],
						paint: {
							'circle-color': colors[i],
							'circle-radius': [
								'step',
								['get', 'point_count'],
								5,
								2,
								20,
								5,
								30
							]
						}
					};

					// Cluster - unclustered points
					modeLayers['Cluster'][i + 20] = {
						id: `cl${i}_u`,
						type: 'circle',
						source: `boire_cluster_${i}`,
						filter: ['!', ['has', 'point_count']],
						paint: {
							'circle-color': colors[i],
							'circle-radius': 5
						}
					};

					modeLayers['Cluster'][i + 40] = {
						id: `cl${i}_count`,
						type: 'symbol',
						source: `boire_cluster_${i}`,
						filter: ['has', 'point_count'],
						layout: {
							'text-field': ['get', 'point_count'],
							'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
							'text-size': 12
						},
						paint: {
							'text-color': '#000',
							'text-halo-color': '#fff',
							'text-halo-width': 1
						}
					};

					// Coche pour activer la couche
					document.getElementById(`check_${i}`).addEventListener('change', (e) => {
						if (e.target.checked) {
							if (!layerSelection.includes(i)) layerSelection.push(i);
						} else {
							layerSelection = layerSelection.filter(item => item !== i);
						}
						manageLayers();
					});

					// Interaction pour Consultation
					map.on('click', (e) => {
					const features = map.queryRenderedFeatures(e.point, {
						layers: layerSelection.map(i => `c${i}`) // toutes les couches actives
					});
					if (features.length > 0) {
						popdescd.innerHTML = ''
						document.getElementById('description_popup_name').innerText = `Explorateur de données (${features.length})`
						features.forEach((feat) => {
							const no = feat.properties.No === '-1' ? '' : feat.properties.No;
							popdescd.innerHTML += `<h4 class="text-lg">${feat.properties.Nom}</h4><p>${no} ${feat.properties.Adresse} - ${catName[feat.properties.Categorie]}</p>`;
						});
					}
				});
					map.on('mouseenter', `c${i}`, () => map.getCanvas().style.cursor = 'pointer');
					map.on('mouseleave', `c${i}`, () => map.getCanvas().style.cursor = '');
				}
			});

		// Changement de mode
		document.querySelectorAll('input[name="options"]').forEach((radio) => {
			radio.addEventListener('change', () => {
				const selected = document.querySelector('input[name="options"]:checked');
				mode = selected.getAttribute('aria-label');
				manageLayers();
			});
		});
	});


	window.addEventListener('DOMContentLoaded', () => {
		document.getElementById('my_modal_1').showModal();
	});
</script>
